# -*- coding: utf-8 -*-
"""🎓 Graduation Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ma19-GwRy4zmyPqdkOeCV0IZx0ErDkVg

# **DECODING MODERN FOOTBALL: TACTICS, TALENT AND TRANSFER VALUE**

**Import Libraries**
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import glob
import os
import ast
import unicodedata
from math import pi
from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import MultiLabelBinarizer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
from sklearn.metrics import classification_report, confusion_matrix, roc_auc_score, RocCurveDisplay

"""**Utility Functions**"""

def fillna_by_median_group(df, group_col, target_col):
    df[target_col] = df.groupby(group_col)[target_col].transform(lambda x: x.fillna(x.median()))
    return df

def normalize_unicode(name):
    if pd.isnull(name) or not isinstance(name, str):
        return ''

    name = unicodedata.normalize('NFKD', name)
    name = name.encode('ascii', 'ignore').decode('utf-8')
    return name.lower()

def convert_to_short_name(full_name):
    if pd.isnull(full_name) or not isinstance(full_name, str):
        return ''

    parts = full_name.strip().split()
    if len(parts) < 2:
        return full_name.lower()

    first_initial = parts[0][0].lower()
    last_name = parts[-1].lower()

    return f"{first_initial}. {last_name}"

def parse_tag_list(tag_str):
    try:
        tag_list = ast.literal_eval(tag_str)
        if isinstance(tag_list, list):
            return [tag.strip().lstrip('#') for tag in tag_list if tag.strip() and tag != '#']
        return []
    except:
        return []

"""**Import all the CSV files**"""

from google.colab import drive
drive.mount('/content/drive')
folder_path = '/content/drive/MyDrive/DA SCA/🎓 Graduation Project/'
csv_files = [f for f in os.listdir(folder_path) if f.endswith('.csv')]

dfs_dict = {}
for f in csv_files:
    df = pd.read_csv(os.path.join(folder_path, f))
    dfs_dict[f] = df

for file_name, df in dfs_dict.items():
    var_name = file_name.replace('.csv', '')
    globals()[var_name] = df

"""## **Data Cleaning and Processing**

### **FIFA 23 complete player dataset**
"""

ff23_df.info(verbose=True)

ff23_df.head()

# Remove unnessary columns
drop_cols = [
    'player_url', 'fifa_update', 'fifa_update_date', 'player_face_url',
    'club_jersey_number', 'nation_jersey_number', 'real_face',
    'club_team_id', 'club_loaned_from', 'club_joined_date', 'club_contract_valid_until_year',
    'league_id', 'league_name', 'league_level', 'release_clause_eur', 'club_position',
    'nationality_id', 'nation_team_id', 'nation_position', 'goalkeeping_speed',
    'ls','st','rs','lw','lf','cf','rf','rw','lam','cam','ram','lm','lcm','cm','rcm','rm',
    'lwb','ldm','cdm','rdm','rwb','lb','lcb','cb','rcb','rb','gk'
]
ff23_df = ff23_df.drop(columns=drop_cols)

ff23_df.info()

# Check data consistency
ff23_df['fifa_version'].unique()

ff23_df['player_positions'].unique()

ff23_df['short_name'].unique()

ff23_df['club_name'].unique()

ff23_df['nationality_name'].unique()

ff23_df['preferred_foot'].unique()

ff23_df['work_rate'].unique()

ff23_df['body_type'].unique()

ff23_df['overall'].unique()

ff23_df.columns

# Covert data type
ff23_df[['fifa_version', 'preferred_foot', 'work_rate', 'body_type']] = ff23_df[['fifa_version', 'preferred_foot', 'work_rate', 'body_type']].astype('category')
ff23_df[['short_name', 'long_name', 'player_positions', 'club_name', 'nationality_name']] \
       = ff23_df[['short_name', 'long_name', 'player_positions', 'club_name', 'nationality_name']].astype(str)

# Covert data type
convert_cols = [
       'value_eur', 'wage_eur',
       'pace', 'shooting', 'passing', 'dribbling', 'defending', 'physic',
       'attacking_crossing', 'attacking_finishing', 'attacking_heading_accuracy',
       'attacking_short_passing', 'attacking_volleys', 'skill_dribbling',
       'skill_curve', 'skill_fk_accuracy', 'skill_long_passing',
       'skill_ball_control', 'movement_acceleration', 'movement_sprint_speed',
       'movement_agility', 'movement_reactions', 'movement_balance',
       'power_shot_power', 'power_jumping', 'power_stamina', 'power_strength',
       'power_long_shots', 'mentality_aggression', 'mentality_interceptions',
       'mentality_positioning', 'mentality_vision', 'mentality_penalties',
       'mentality_composure', 'defending_marking_awareness',
       'defending_standing_tackle', 'defending_sliding_tackle',
       'goalkeeping_diving', 'goalkeeping_handling', 'goalkeeping_kicking',
       'goalkeeping_positioning', 'goalkeeping_reflexes'
]
ff23_df[convert_cols] = ff23_df[convert_cols].astype('float64')

ff23_df['dob'].unique()

ff23_df['dob'] = pd.to_datetime(ff23_df['dob'], errors='coerce')
ff23_df.rename(columns={'dob': 'date_of_birth'}, inplace=True)

ff23_df = ff23_df.drop_duplicates(keep = 'first', ignore_index = True)

ff23_df.info()

ff23_df.head()

"""### **Football Data from Transfermarkt**"""

tm_players_df.info()

tm_players_df.head()

tm_players_df = tm_players_df.convert_dtypes()

tm_players_df['date_of_birth'].unique()

tm_players_df['date_of_birth'] = pd.to_datetime(tm_players_df['date_of_birth'], errors='coerce')
tm_players_df['date_of_birth'].dt.strftime('%Y-%m-%d')

tm_players_df['country_of_citizenship'].unique()

# Rename columns to get join key
tm_players_df.rename(columns={'country_of_citizenship': 'nationality_name'}, inplace=True)

tm_players_df['position'].unique()

tm_players_df['position'].value_counts(normalize=True)

"""Since the number of 'Missing' values ​​in the column position of the tm_players_df dataset only uses 0.6%, we will drop these values."""

tm_players_df = tm_players_df[tm_players_df['position'] != 'Missing']

tm_players_df = tm_players_df.drop_duplicates(keep='first', ignore_index=True)

tm_players_df.head()

# Normalize the 'name' column in both datasets
ff23_df['name'] = ff23_df['short_name'].apply(convert_to_short_name).apply(normalize_unicode)
tm_players_df['name'] = tm_players_df['name'].apply(convert_to_short_name).apply(normalize_unicode)

# Create a standardized join key
ff23_df['join_key'] = (
    ff23_df['name'].str.lower().str.replace('.', '', regex=False).str.strip() + '|' +
    ff23_df['date_of_birth'].astype(str) + '|' +
    ff23_df['nationality_name'].str.lower().str.strip()
)

tm_players_df['join_key'] = (
    tm_players_df['name'].str.lower().str.replace('.', '', regex=False).str.strip() + '|' +
    tm_players_df['date_of_birth'].astype(str) + '|' +
    tm_players_df['nationality_name'].str.lower().str.strip()
)

# Drop duplicates join_key
tm_players_df.drop_duplicates(subset='join_key', keep='first', inplace=True)

# Join
ff23_df = ff23_df.merge(tm_players_df[['join_key', 'position']], on='join_key', how='left')

# Mapping Transfermarkt position
position_map = {
    'Goalkeeper': 'GK',
    'Defender': 'DF',
    'Midfield': 'MF',
    'Attack': 'FW'
}
ff23_df['position_group'] = ff23_df['position'].map(position_map)

ff23_df.info()

ff23_df.head()

# Fill N/A numeric columns by median in each position_group
numeric_cols = ff23_df.select_dtypes('float64').columns.tolist()
for col in numeric_cols:
    ff23_df = fillna_by_median_group(ff23_df, 'position_group', col)

# Drop N/A values and reset index
cols_needed = ff23_df.columns[ff23_df.notna().sum() == 68830].tolist()
ff23_df.dropna(subset=cols_needed, inplace=True)
ff23_df.reset_index(drop=True, inplace=True)

ff23_df.info()

tm_player_valuations_df.info()

tm_player_valuations_df.head()

tm_players_df = tm_players_df.drop(columns='market_value_in_eur')

tm_player_valuations_df = tm_player_valuations_df.convert_dtypes()

tm_player_valuations_df['market_year'] = pd.to_datetime(tm_player_valuations_df['date']).dt.year

# Convert to year
tm_player_valuations_df['market_year'] = pd.to_datetime(tm_player_valuations_df['date']).dt.year

# Calculate mean per year for per player
tm_player_valuations_df = tm_player_valuations_df.groupby(['player_id', 'market_year'])['market_value_in_eur'].mean().reset_index()

# Merge to include market_year and market_value_in_eur columns into tm_players_df
tm_players_df = tm_players_df.merge(
    tm_player_valuations_df[['player_id', 'market_year', 'market_value_in_eur']],
    on='player_id',
    how='left'
)

tm_players_df = tm_players_df.convert_dtypes()

# Map fifa version with following year to join
fifa_to_year = {
    15: 2015,
    16: 2016,
    17: 2017,
    18: 2018,
    19: 2019,
    20: 2020,
    21: 2021,
    22: 2022,
    23: 2023,
}
ff23_df['market_year'] = ff23_df['fifa_version'].map(fifa_to_year).astype(pd.Int64Dtype())

ff23_df.info()

# Merge final
ff23_df = ff23_df.merge(
    tm_players_df[['join_key', 'market_year', 'market_value_in_eur']],
    on=['join_key', 'market_year'],
    how='left'
)

ff23_df.info(verbose=True)

"""## **Exploratory Data Analysis**"""

# Dataset overview
print("🔍 Dataset Overview:")
print(ff23_df.shape)
print(ff23_df.info())
print("\n🧼 Missing Values:")
print(ff23_df.isna().sum() > 0)

"""- Here we don't need to fillna for the market_value_in_eur column because it is **the actual market value of Transfermarkt**, we need real data to evaluate underrated/overrated for part 3.
- 5% missing is **acceptable**, we can filter out these rows when doing the final evaluation after building the model.
"""

ff23_df.describe(include='all')

# Distribution by FIFA Version (Year)
plt.figure(figsize=(12,4))
ff23_df['fifa_version'].value_counts().sort_index().plot(kind='bar', color='skyblue')
plt.title('Number of Players by FIFA Version')
plt.xlabel('FIFA Version (Year)')
plt.ylabel('Player Count')
plt.xticks(rotation=0)
plt.tight_layout()
plt.show()

"""The bar chart shows that the number of players with complete attribute data (i.e., no major missing values) is quite consistent across FIFA versions from 2015 to 2023, ranging from approximately **6,800 to over 8,000 players per year.** This indicates that the filtered dataset is **balanced and reliable**, with no specific year being over- or under-represented. Such consistency allows for trustworthy time-series analyses."""

# Distribution by position groups
plt.figure(figsize=(6,4))
ff23_df['position_group'].value_counts().plot(kind='bar', color='orange')
plt.title('Player Distribution by Position Group')
plt.xlabel('Position Group')
plt.ylabel('Player Count')
plt.xticks(rotation=0)
plt.tight_layout()
plt.show()

"""The bar chart shows the distribution of players by position group:
- **Defenders (DF)** are the most numerous, with over **22,000 players**, indicating a wide variety of defensive roles represented in the data.
- **Midfielders (MF)** and **Forwards (FW)** have a fairly balanced count (around **18,000–20,000**), offering enough representation for detailed role-based analysis.
- **Goalkeepers (GK)** have the smallest count (around **7,000**), which is expected given that teams typically have fewer goalkeepers.

➡️ Overall, the player distribution is **balanced and sufficient**, allowing for meaningful position-based comparisons in subsequent analyses. In addition, if we look more closely, in a relative way we can see that based on the number of players in each position, the most popular formation used is 4-3-3 (4 defenders - 3 midfielders - 3 forwards), quite interesting, right?

Because overall is averaged by main attributes, and main attributes are averaged by detailed attributes, we only need to EDA by main attributes, then analyze in more detail.
"""

# Distribution of main attributes
main_attributes = ['pace', 'shooting', 'passing', 'dribbling', 'defending', 'physic']

fig, axes = plt.subplots(2, 3, figsize=(20, 10))
axes = axes.flatten()

for i, attr in enumerate(main_attributes):
    sns.histplot(ff23_df[attr], bins=30, kde=True, color='teal', ax=axes[i])
    axes[i].set_title(f'Distribution of {attr.capitalize()}')
    axes[i].set_xlabel(attr.capitalize())
    axes[i].set_ylabel('Frequency')

plt.tight_layout()
plt.show()

"""**Insights:**
- **Pace:** slight right-skewed distribution, with most players having pace between **60–80**, peaking around **75–80**. Very fast players (90+) are rare.
- **Shooting:** highly right-skewed, most players have average shooting in the **30–70** range. Exceptional shooters (80+) are relatively few.
- **Passing:** almost normal distribution centered around **55–65**, indicating a balanced spread. Top-tier passers (above 80) are rare.
- **Dribbling:** concentrated around **60–70** with slight variation on both ends, reflecting consistent dribbling ability across player groups.
- **Defending:** bimodal shape, one peak at **30–40** (attackers, midfielders) and another at **60–70** (defensive roles), reflecting a clear divide between attack and defense.
- **Physic:** widely distributed with most values in the **60–80** range, peaking at **75–80**, showing physicality is a generally well-represented attribute.
"""

# Correlation matrix of Main Attributes
plt.figure(figsize=(8,6))
sns.heatmap(ff23_df[main_attributes].corr(), annot=True, cmap='coolwarm', fmt='.2f')
plt.title('Correlation Matrix of Main Attributes')
plt.tight_layout()
plt.show()

"""**Insights:**

**🔍 Strong Correlations:**
- **Passing – Dribbling:** 0.82 → Players who are good passers often excel at dribbling. This makes sense for playmakers (CAM, CM).
- **Shooting – Dribbling:** 0.72 → Players who shoot well also tend to dribble well — commonly seen in technical forwards (ST, CF, wingers like Messi, Neymar, Mbappé).
- **Shooting – Passing:** 0.64 → Players with good shooting ability often have decent passing skills — typical for all-rounded attacking midfielders (Kevin De Bruyne).

**📉 Strong Negative Correlations:**
- **Shooting – Defending:** -0.50 → Attacking players (good shooters) usually aren't strong defenders — clearly reflecting the difference between strikers and defenders.
- **Dribbling – Defending:** -0.24 → Players good at dribbling tend to be weaker at defending — common for offensive roles.

**📌 Other Notable Relationships:**
- **Pace – Dribbling:** 0.51 → Fast players often dribble well — usually wide players and wingers.
- **Defending – Physic:** 0.58 → Defenders and defensive midfielders usually possess strong physical attributes (CB, CDM).
- **Pace – Defending:** -0.24 → Good defenders aren't necessarily fast (with exceptions like modern fullbacks: Walker, Hakimi, etc).

**🧠 Insight Summary:** Players can generally be grouped into two major clusters:
- **Technical – Attacking Group:** Dribbling, Passing, Shooting, Pace (strong positive correlation within).
- **Physical – Defensive Group:** Defending, Physic (positive correlation within, negatively correlated with technical attributes).

This correlation heatmap is useful for clustering player roles or building classification models based on player positions.
"""

# Mean of main attributes by year and position group
df_grouped = ff23_df[ff23_df['position_group'] != 'GK']
df_grouped = df_grouped.groupby(['fifa_version', 'position_group'])[main_attributes].mean().reset_index()

fig, axes = plt.subplots(2, 3, figsize=(20, 10))
axes = axes.flatten()

for i, attr in enumerate(main_attributes):
    sns.lineplot(data=df_grouped, x='fifa_version', y=attr, hue='position_group',
                 marker='o', ax=axes[i])
    axes[i].set_title(f'{attr.capitalize()} Over Time')
    axes[i].set_xlabel('FIFA Version (Year)')
    axes[i].set_ylabel(f'Avg {attr.capitalize()}')
    axes[i].tick_params(axis='x', rotation=0)

for j in range(i + 1, len(axes)):
    axes[j].axis('off')

plt.tight_layout()
plt.show()

"""**Insights:**
- **Pace:** The average speed of forwards (FW) and defenders (DF) remains relatively stable over the years, while midfielders (MF) have seen a slight decline.
- **Shooting:** Forwards consistently have the highest shooting statistics with a slight upward trend, midfielders also have a slight upward trend while defenders are almost unchanged
- **Passing:** Midfielders (MF) lead the way in passing and show a steady increase over time. Other positional groups also show slight improvements.
- **Dribbling:** Dribbling remains high and stable for both forwards and midfielders. However, defenders show noticeable improvement over time, reflecting the increasing importance of ball control.
- **Defending:** Defenders maintain high and consistent defensive stats. Midfielders show a gradual increase, showing more all-round responsibility. Forwards also improve slightly despite their low values.
- **Physic:** Midfielders show slight improvement, while defenders and forwards remain largely unchanged.
"""

# Boxplot by year to check outliers
plt.figure(figsize=(20, 10))
for idx, attr in enumerate(main_attributes, 1):
    plt.subplot(2, 3, idx)
    sns.boxplot(data=ff23_df, x='fifa_version', y=attr)
    plt.title(f'{attr.capitalize()} Distribution by FIFA Version')
    plt.xlabel('FIFA Version (Year)')
    plt.ylabel(attr.capitalize())
    plt.ylim(0, 100)
    plt.xticks(rotation=0)
plt.tight_layout()
plt.show()

"""**Insights:**
- **Stable distribution:** The Pace, Shooting, Passing, Dribbling, Defending and Physic indicators all have a fairly stable distribution across FIFA versions. The Median and IQR do not change significantly, indicating that the player rating structure is maintained consistently.
- **Outliers:** There are many outliers, mainly players with very low ratings. This reflects the diversity of player quality in the game.
- **Differences between indicators:** Pace, Dribbling and Physic tend to be higher than Passing, Shooting and Defending, which are often concentrated at the average/low level.

→ The EDA results show that the data has a clear structure, is stable over time and has a clear stratification between indicators. We don't need to remove outliers because these are all important data points that support the subsequent analysis well.

## **Part 1 - Tactical Shift Over Time**

### **Which position has evolved the most in modern football?**
"""

ff23_df.columns

all_attributes = [
       'pace', 'shooting', 'passing', 'dribbling',
       'defending', 'physic', 'attacking_crossing', 'attacking_finishing',
       'attacking_heading_accuracy', 'attacking_short_passing',
       'attacking_volleys', 'skill_dribbling', 'skill_curve',
       'skill_fk_accuracy', 'skill_long_passing', 'skill_ball_control',
       'movement_acceleration', 'movement_sprint_speed', 'movement_agility',
       'movement_reactions', 'movement_balance', 'power_shot_power',
       'power_jumping', 'power_stamina', 'power_strength', 'power_long_shots',
       'mentality_aggression', 'mentality_interceptions',
       'mentality_positioning', 'mentality_vision', 'mentality_penalties',
       'mentality_composure', 'defending_marking_awareness',
       'defending_standing_tackle', 'defending_sliding_tackle',
       'goalkeeping_diving', 'goalkeeping_handling', 'goalkeeping_kicking',
       'goalkeeping_positioning', 'goalkeeping_reflexes']

# Calculate average by position group and FIFA version
mean_by_group = ff23_df.groupby(['fifa_version', 'position_group'])[all_attributes].mean().reset_index()

# Covert to long data for lineplot
melted_df = mean_by_group.melt(id_vars=['fifa_version', 'position_group'], value_vars=all_attributes, var_name='attribute', value_name='avg_score')

position_groups = ['DF', 'MF', 'FW']
fig, axes = plt.subplots(1, 3, figsize=(20, 5))

for idx, pos in enumerate(position_groups):
    ax = axes[idx]
    pos_df = melted_df[(melted_df['position_group'] == pos) & (melted_df['attribute'].isin(main_attributes))]
    sns.lineplot(data=pos_df, x='fifa_version', y='avg_score', hue='attribute', marker='o', ax=ax)
    ax.set_title(f'{pos} - Attributes Evolution Over Time')
    ax.set_xlabel('FIFA Version (Year)')
    ax.set_ylabel('Average Score')
    ax.tick_params(axis='x', rotation=0)
    ax.legend(title='Attribute', bbox_to_anchor=(1.02, 1), loc='upper left')
    ax.grid(True)

fig.suptitle('Evolution of Main Attributes by Position Group Over Time', fontsize=16)
plt.tight_layout()
plt.show()

"""Analyzing the evolution of average player attributes by position across FIFA editions provides an interesting lens for observing how tactical trends in contemporary football can be modeled and emphasized in-game. The charts show:
- **Core roles remain but with adjustments:** While the core positions remain specialised (Defensive/Physical Defenders, Passing/Dribbling Midfielders, Speed/Shooting Forwards), the change in average attributes shows an adaptation to modern tactics.
- **Increased Defensive Ability of Midfielders:** The most notable is the significant increase in the average Defensive attribute of the Midfielder (MF) group across editions. This clearly reflects the tactical trends in contemporary football, where midfielders are increasingly asked to participate in defensive work, from pressing high, covering the defence to recovering the ball in the midfield. Tactical systems such as Gegenpressing or formations with a mobile, versatile central midfielder are becoming increasingly popular.
- **The enduring importance of pace:** The pace attribute is quite stable in defenders and forwards. This emphasizes that, despite the increasing complexity of tactics, pace remains an extremely important factor in modern football, necessary for quick transitions, individual breakthroughs, or pressing and covering. However, in midfielders, there is a slight decrease, indicating the role of keeping the rhythm, controlling or regulating the tempo of the match.
- **A slight trend towards more well-rounded players:** The slight increase in some non-positional attributes (e.g. Passing/Dribbling in DF, Shooting/Physic in MF) may imply that modern football requires players in all positions to have a more diverse skill base to contribute to multiple aspects of the game, in line with tactics that emphasize versatility and positional interchangeability.
- **Traditional Strengths Remain Priorities:** Despite a slight ‘versatility’, the core attributes that characterize each position remain the ones with the highest and most consistent average scores. This suggests that regardless of tactical changes, having players who excel in the core skills appropriate to their position of expertise remains the key to success.

> **In summary, data from FIFA suggests that the most notable tactical change reflected is the increased role and defensive demands on midfielders, alongside the continued importance of pace and the (slight) demand for greater versatility from players in all positions.**
"""

gk_attrs = ['goalkeeping_diving', 'goalkeeping_handling', 'goalkeeping_kicking', 'goalkeeping_positioning', 'goalkeeping_reflexes', 'attacking_short_passing', 'mentality_vision', 'skill_long_passing']
gk_df = melted_df[(melted_df['position_group'] == 'GK') & (melted_df['attribute'].isin(gk_attrs))]

plt.figure(figsize=(12, 6))
sns.lineplot(data=gk_df, x='fifa_version', y='avg_score', hue='attribute', marker='o')
plt.title('GK Attributes Evolution Over Time')
plt.xlabel('FIFA Version (Year)')
plt.ylabel('Average Score')

plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left', borderaxespad=0., title='Attribute')

plt.tight_layout()
plt.grid(True)
plt.show()

"""- Footwork stats such as short passing, long passing have increased slightly over the years, especially vision has increased significantly, reflecting the need for goalkeepers to participate more in situations of developing the ball from the back line, and can play the role of a sweeper goalkeeper.
- Traditional stats such as diving, reflexes, positioning... remain stable over the years.
> **Modern goalkeepers must be good at both technical skills and coordination, becoming the "first initiator of attack".**
"""

df_attrs = ['attacking_finishing', 'power_long_shots', 'attacking_short_passing', 'skill_long_passing', 'mentality_vision', 'skill_dribbling', 'ball_control', 'mentality_positioning', 'skill_ball_control', 'skill_long_passing']
df_df = melted_df[(melted_df['position_group'] == 'DF') & (melted_df['attribute'].isin(df_attrs))]

plt.figure(figsize=(12, 6))
sns.lineplot(data=df_df, x='fifa_version', y='avg_score', hue='attribute', marker='o')

plt.title('DF Attributes Evolution Over Time')
plt.xlabel('FIFA Version (Year)')
plt.ylabel('Average Score')

plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left', borderaxespad=0., title='Attribute')

plt.tight_layout()
plt.grid(True)
plt.show()

"""**Modern defenders are significantly improving their ability to play with their feet:**
- Stats such as short passing, ball control, dribbling, long passing, vision have all increased steadily over the years.
- On the contrary, skills such as long shots and finishing have increased slowly, remained the same or decreased slightly, showing that the goal-scoring role of defenders has not changed much.
> **The trend of ball-playing defenders is becoming more and more obvious, they not only defend but also participate in build-up play, distributing the ball from the back line.**
"""

mf_attrs = ['attacking_finishing', 'mentality_positioning', 'skill_dribbling', 'skill_ball_control', 'attacking_short_passing', 'skill_long_passing', 'mentality_vision', 'defending_sliding_tackle', 'agility', 'movement_balance', 'defending_standing_tackle', 'defending_marking_awareness']
mf_df = melted_df[(melted_df['position_group'] == 'MF') & (melted_df['attribute'].isin(mf_attrs))]

plt.figure(figsize=(14, 7))
sns.lineplot(data=mf_df, x='fifa_version', y='avg_score', hue='attribute', marker='o', palette='tab20')

plt.title('MF Attributes Evolution Over Time')
plt.xlabel('FIFA Version (Year)')
plt.ylabel('Average Score')

plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left', borderaxespad=0., title='Attribute')

plt.tight_layout()
plt.grid(True)
plt.show()

"""**Midfielders continue to be at the heart of tactics with consistent and consistent improvements in both:**
- Tactical thinking: positioning, vision
- Ball control & passing skills: short passing, long passing, dribbling, ball control
- Defensive ability: standing tackle, sliding tackle, marking awareness – increased sharply, especially in the period 2019–2023.
> **Shows the emergence of complete midfielders – both offensive and defensive, and controlling the tempo of the match.**
"""

fw_attrs = ['attacking_short_passing', 'skill_long_passing', 'mentality_vision', 'mentality_aggression', 'defending_marking_awareness', 'defending_standing_tackle', 'defending_sliding_tackle']
fw_df = melted_df[(melted_df['position_group'] == 'FW') & (melted_df['attribute'].isin(fw_attrs))]

plt.figure(figsize=(12, 6))
sns.lineplot(data=fw_df, x='fifa_version', y='avg_score', hue='attribute', marker='o', palette='tab20')
plt.title('FW Attributes Evolution Over Time')
plt.xlabel('FIFA Version (Year)')
plt.ylabel('Average Score')
plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left', borderaxespad=0., title='Attribute')
plt.tight_layout()
plt.grid(True)
plt.show()

"""**Forwards in this period also had changes in their playing style:**
- Slight increase in short passing and vision skills, showing the role of supporting attack coordination and connecting with the lines is increasingly clear.
- Defensive indicators increased steadily and continuously from 2016 - 2023 (standing tackle, sliding tackle), especially marking awareness increased sharply from 2018 - 2019, reflecting the trend of strikers having to actively participate in high pressing/defending from a distance.
> **Forwards in modern football are no longer "poachers" who just wait for the ball but are also the first link in the defensive system.**

**Conclusion**
> **In modern football, all positions have undergone significant evolution to adapt to increasingly complex tactical requirements and a higher pace of play. However, in terms of the ability to change and expand roles beyond traditional definitions, it can be said that the Goalkeeper (GK) and Defender (especially the full-back) are the two positions with the most obvious and revolutionary "evolution".**

### **What attributes of positions have changed significantly over the years?**
"""

all_attributes = [
       'pace', 'shooting', 'passing', 'dribbling',
       'defending', 'physic', 'attacking_crossing', 'attacking_finishing',
       'attacking_heading_accuracy', 'attacking_short_passing',
       'attacking_volleys', 'skill_dribbling', 'skill_curve',
       'skill_fk_accuracy', 'skill_long_passing', 'skill_ball_control',
       'movement_acceleration', 'movement_sprint_speed', 'movement_agility',
       'movement_reactions', 'movement_balance', 'power_shot_power',
       'power_jumping', 'power_stamina', 'power_strength', 'power_long_shots',
       'mentality_aggression', 'mentality_interceptions',
       'mentality_positioning', 'mentality_vision', 'mentality_penalties',
       'mentality_composure', 'defending_marking_awareness',
       'defending_standing_tackle', 'defending_sliding_tackle',
       'goalkeeping_diving', 'goalkeeping_handling', 'goalkeeping_kicking',
       'goalkeeping_positioning', 'goalkeeping_reflexes']

# Calculate the annual change
melted_main = melted_df[melted_df['attribute'].isin(main_attributes)].copy()
melted_main = melted_main.sort_values(['position_group', 'attribute', 'fifa_version'])
melted_main['delta'] = melted_main.groupby(['position_group', 'attribute'])['avg_score'].diff()

# Average annual change
avg_change = melted_main.groupby(['position_group', 'attribute'])['delta'].mean().reset_index()

# Draw chart with data labels
fig, axes = plt.subplots(1, 3, figsize=(18, 6), sharey=True)
positions = ['DF', 'MF', 'FW']
colors = ['steelblue', 'mediumseagreen', 'tomato']

for i, pos in enumerate(positions):
    data = avg_change[avg_change['position_group'] == pos].sort_values('delta', ascending=False)
    ax = axes[i]
    barplot = sns.barplot(data=data, x='attribute', y='delta', color=colors[i], ax=ax)

    # Add data labels
    for p in barplot.patches:
        height = p.get_height()
        ax.text(
            p.get_x() + p.get_width() / 2,
            height + 0.01 if height >= 0 else height - 0.01,
            f'{height:.2f}',
            ha='center',
            va='bottom' if height >= 0 else 'top',
            fontsize=11
        )

    ax.axhline(0, color='gray', linestyle='--')
    ax.set_title(f'{pos}')
    ax.set_xlabel('')
    ax.set_ylabel('Average Yearly Change')
    ax.tick_params(axis='x', rotation=0)

plt.suptitle('Tactical Evolution: Average Yearly Change in Main Attributes (2015–2023)', fontsize=16)
plt.tight_layout()
plt.show()

"""- Dribbling and Defending are the two most changed attributes
 - Defender (DF): Dribbling has increased the most, followed by Passing
➤ Defenders today need individual technique and the ability to deploy the ball from the back, not just pure defense.
 - Midfielder (MF): Defending has increased very strongly, surpassing Shooting and Dribbling
➤ Reflecting the trend of comprehensive midfielders: both organizing the play and participating in pressing, intercepting, and supporting defenders.
 - Forward (FW): Increasing steadily in many attributes, but Passing and Defending are notable
➤ Modern strikers not only know how to score goals but also participate in supporting pressing, building play, they are the first line of defense when the home team does not have the ball.

- Pace (speed) decreased significantly in midfielders, increased at least in the other 2 groups
➤ Shows that speed is no longer the decisive factor — instead, tactical thinking, coordination and movement without the ball are.

**📌 Conclusion**
- The most significant changes over the years are Dribbling (especially in defenders), Defending (clearly in midfielders), and Passing (in defenders and forwards).
- The general trend is that modern players need to be more versatile, supporting the overall play instead of just doing well in individual roles.
- Speed ​​(Pace) is no longer a priority as before.

### **Is there a shift in the tactics and playing style of football teams over time?**

> ***Here we do not analyze the tactics of a specific team because the tactics of each team or a specific group of teams are different and there are many teams, we only rely on the changes in the core attributes of the players to see the overall picture of the typical playing styles of the teams.***
"""

# Remove main attributes from all attributes
excluded_attrs = ['pace', 'shooting', 'passing', 'dribbling', 'defending', 'physic']
filtered_attributes = [attr for attr in all_attributes if attr not in excluded_attrs]

# Filter unpivoted data
filtered_df = melted_df[melted_df['attribute'].isin(filtered_attributes)]

# Average by year
avg_by_year = filtered_df.groupby(['fifa_version', 'attribute'])['avg_score'].mean().reset_index()

# Calculate delta
pivot_df = avg_by_year.pivot(index='fifa_version', columns='attribute', values='avg_score')
delta_per_year = pivot_df.diff().iloc[1:]

# Yearly average change
mean_delta = delta_per_year.mean().reset_index()
mean_delta.columns = ['attribute', 'avg_yearly_change']

# Get top 10 increases and decreases
top_increase = mean_delta.sort_values(by='avg_yearly_change', ascending=False).head(15)
top_decrease = mean_delta[~mean_delta['attribute'].isin(top_increase['attribute'])] \
                            .sort_values(by='avg_yearly_change').head(10)
top_increase = top_increase.head(10)

# Merge and assign label
top_changes = pd.concat([top_increase, top_decrease])
top_changes['change_type'] = top_changes['avg_yearly_change'].apply(lambda x: 'Increase' if x > 0 else 'Decrease')
top_changes_sorted = top_changes.sort_values(by='avg_yearly_change', ascending=False)

# Draw chart
plt.figure(figsize=(10, 10))
sns.barplot(
    data=top_changes_sorted,
    y='attribute', x='avg_yearly_change',
    hue='change_type',
    dodge=False,
    palette={'Increase': 'mediumseagreen', 'Decrease': 'indianred'}
)

plt.axvline(0, color='gray', linestyle='--')
plt.title('Top 10 Increases and Decreases in Core Attributes Over Time', fontsize=14)
plt.xlabel('Average Yearly Change')
plt.ylabel('Attributes')
plt.legend(title='Change Type', loc='lower right')
plt.tight_layout()
plt.show()

"""From this chart we can see that there has been a clear shift in the tactical meta of football during this period:
- **Volleys** have dropped the most, showing that **live shots that score goals are no longer popular** and that there are no players with good volleying ability during this period.
- **Long shots** have dropped the second most, showing that teams are **no longer relying on long-range shots** to score goals, but are shifting to **more methodical and calculated combinations.**
- **Crossing and heading accuracy are both in the top 10 of the biggest declines**, showing that teams are **no longer favoring the Anglo-Saxon style of overlapping, cross-heading or corner kicks** to score goals, which often relies heavily on **high-ball situations**.
- The indicators such as **vision, long passing, short passing, reactions and marking awareness** are all in the top 10 with the strongest increase, which reflects the **synchronous pressing and escaping pressing style from many lines that requires the ability to control, pass the ball, catch people and react quickly**, a hallmark of in modern football.
- The **goalkeeper's index** sets have also increased significantly over the years, showing that **goalkeepers must be more and more comprehensive and excellent** because in modern football, a save is no different from a goal, especially in big matches.

**Conclusion**
> **Football has always been in constant motion and change throughout its history, with increasingly high and complex tactical requirements, players also need to change to adapt, they are no longer constrained in traditional roles but are increasingly flexible and versatile.**

# 🔧 **Recommendations for Coaches, Scouts, and Football Analysts**

📌 **For Coaches**
- **Integrate versatility into training philosophy:** Encourage players, especially defenders and midfielders, to develop skills beyond their traditional roles. For example, defenders should be trained in ball control and distribution, while midfielders should be drilled on defensive positioning and recovery.
- **Tactical emphasis on collective pressing and transition play:** Build tactical systems that emphasize **press-resistance**, **quick transitions**, and **fluid positional play**, leveraging the modern player's broader skillset.
- **Adapt to player evolution:** Utilize players who can operate in multiple systems and positions (e.g., inverted full-backs, hybrid midfielders), maximizing tactical flexibility against different opponents.

🧠 **For Football Analysts**
- **Update performance benchmarks by position:** Attribute baselines need to be adjusted as traditional roles have evolved. For instance, a modern centre-back’s passing stats may now be as critical as their tackling.
- **Incorporate attribute evolution into player evaluations:** Use historical attribute trends to predict future value and role adaptability, especially for youth development and long-term squad planning.
- **Quantify versatility impact:** Measure how players with higher cross-positional attributes contribute to team success, particularly in systems reliant on **fluid formations** or **total football principles.**

🕵️ **For Scouting & Recruitment**
- **Target multi-dimensional profiles:** Prioritize scouting players who show high development in **non-traditional attributes** for their position (e.g., high Dribbling/Passing for defenders or high Defending for forwards).
- **Track attribute trends to spot undervalued talent:** Use insights on emerging tactical requirements (e.g., pressing forwards or playmaking full-backs) to identify underrated players who may not stand out under older scouting criteria.
- **Scout for cognitive & tactical intelligence:** Prioritize players with high vision, reaction, and marking awareness — key traits that support modern tactical systems like **gegenpressing, positional play**, and **build-up from the back.**

---

🏁 **Summary**
> The tactical transformation of modern football demands **multifunctional, tactically intelligent players.** Coaches should train adaptability, scouts should find versatility, and analysts must redefine excellence based on evolving roles — because success no longer lies in specialization alone, but in **synchronized versatility.**

## **Part 2 – The Making of Great Players**
> ***This study focuses on in-game attributes only, not real-life performance metrics.***

### **What main attributes make great players?**

> ***Analysis is based on player attributes in EA FIFA game data, which reflect a gamified interpretation of real-life performance.***
"""

gk_attributes = ['goalkeeping_diving', 'goalkeeping_handling', 'goalkeeping_kicking', 'goalkeeping_positioning', 'goalkeeping_reflexes', 'movement_reactions']
position_groups_order = ['GK', 'DF', 'MF', 'FW']

# --- Create Figure and Subplots ---
fig, axs = plt.subplots(1, 4, figsize=(20, 6), subplot_kw=dict(polar=True))
fig.suptitle('Main Attributes by Position Group (Top 5% vs Others)', fontsize=16, y=0.95)

# --- Loop through Position Groups and Plot Radar Charts ---
for i, pos in enumerate(position_groups_order):
    if pos == 'GK':
        current_attributes = gk_attributes
    else:
        current_attributes = main_attributes

    # Filter players by position group
    pos_df = ff23_df[ff23_df['position_group'] == pos].copy()

    # Calculate Top 5% threshold based on 'overall' rating within the group
    threshold = pos_df['overall'].quantile(0.95)
    top5 = pos_df[pos_df['overall'] >= threshold]
    others = pos_df[pos_df['overall'] < threshold]

    # Calculate mean of the selected attributes for Top 5% and Others
    avg_top5 = top5[current_attributes].mean().values
    avg_others = others[current_attributes].mean().values

    # --- Radar chart setup ---
    labels = current_attributes
    num_vars = len(labels)
    angles = [n / float(num_vars) * 2 * pi for n in range(num_vars)]
    angles += angles[:1]
    top5_scores = list(avg_top5) + [avg_top5[0]]
    others_scores = list(avg_others) + [avg_others[0]]

    # --- Plot data ---
    ax = axs[i]
    ax.plot(angles, top5_scores, linewidth=2, linestyle='solid', label='Top 5%')
    ax.fill(angles, top5_scores, alpha=0.3)
    ax.plot(angles, others_scores, linewidth=2, linestyle='dashed', label='Others')
    ax.fill(angles, others_scores, alpha=0.1)
    ax.set_theta_offset(pi / 2)
    ax.set_theta_direction(-1)
    ax.set_thetagrids([a * 180/pi for a in angles[:-1]], labels)
    ax.set_title(f'{pos}', y=1.1, fontsize=14)

    # Add legend only to the first plot for clarity
    if i == 0:
        ax.legend(loc='upper right', bbox_to_anchor=(1.3, 1.1), fontsize=10)

plt.tight_layout(rect=[0, 0, 1, 0.95])
plt.show()

"""- **Goalkeepers (GK):** Top 5% excel in **Diving, Handling, Positioning, Reflexes, Reactions.**
> A top goalkeeper cannot lack any GK skills – from reflexes, positioning to ball handling. **Reactions** play a key role in dealing with dangerous situations.
- **Defenders (DF):** Top 5% have superior **Defending**, along with significantly higher **Passing, Dribbling, Shooting.**
> Modern defenders must not only defend well but also **handle the ball, pass the ball and support the attack.** Pace does not need to be too high if they can read the situation well.
- **Midfielders (MF):** The biggest difference lies in **Passing, Dribbling**, followed by Shooting.
> A great midfielder is someone who **holds the ball well, passes creatively and has the ability to finish the situation.** They dictate play and create chances for their teammates and themselves.
- **Forwards (FW):**
> Top 10% excel in **Shooting, Dribbling, Passing** – the ultimate attacking skill set.
> Legendary forwards are those who **can decide the game with their individual skill** and scoring ability.
"""

# Create Legend Group sorting column (Top 5% vs Others)
ff23_df['legend_group'] = ff23_df.groupby('position_group')['overall'] \
    .transform(lambda x: ['Top 5%' if val >= x.quantile(0.95) else 'Others' for val in x])

# Setup figure
fig, ax = plt.subplots(figsize=(12, 6))
fig.suptitle('Goalkeeper Attributes Distribution (Top 5% vs Others)', fontsize=16, y=0.95)

# Draw single boxplot chart for GK
sns.boxplot(
    data=ff23_df[ff23_df['position_group'] == 'GK'].melt(
        id_vars='legend_group',
        value_vars=gk_attributes,
        var_name='Attribute',
        value_name='Value'
    ),
    x='Attribute',
    y='Value',
    hue='legend_group',
    palette={'Top 5%': 'orange', 'Others': 'lightblue'},
    ax=ax
)

ax.set_xlabel('')
ax.set_ylabel('')
ax.set_ylim(0, 100)
ax.legend(loc='upper right', fontsize=9).set_title('')

# Clean up layout
plt.tight_layout()
plt.subplots_adjust(top=0.88)
plt.show()

"""- In the **goalkeeper (GK)** group, the players in the **top 5%** have a **well-rounded and consistent skill set.** They are not just excellent in a few stats, but are **equally good in all the mandatory aspects** of the GK position – from **reflexes, positioning, kicking** to **reactions.**
- The Top 5% group has a shorter box, meaning low variability and few outliers, for example goalkeeping_reflexes and movement_reactions of the Top 5% group are both concentrated around 80–88. This implies that **Legend GKs are consistent**, maintaining a **high level of performance regardless of temporary fluctuations** in form.
- Notably, **reactions** and **reflexes** are the attributes that show the biggest gap between the Legend group and the rest – this is related to the ability to **make spectacular saves**, which is **what makes a great goalkeeper.**
"""

# Create sorting columns for DF/MF/FW to force display order
ff23_df['position_group_ordered'] = ff23_df['position_group'].copy()
ff23_df.loc[~ff23_df['position_group_ordered'].isin(['DF', 'MF', 'FW']), 'position_group_ordered'] = pd.NA
ff23_df['position_group_ordered'] = pd.Categorical(
    ff23_df['position_group_ordered'],
    categories=['DF', 'MF', 'FW'],
    ordered=True
)

# Setup figure
fig, axs = plt.subplots(1, 3, figsize=(20, 6), sharey=True)
fig.suptitle('Main Attributes Distribution (Top 5% vs Others)', fontsize=16, y=0.98)

# Draw boxplot
for i, pos in enumerate(['DF', 'MF', 'FW']):
    sns.boxplot(
        data=ff23_df[ff23_df['position_group_ordered'] == pos].melt(
            id_vars=['legend_group'],
            value_vars=main_attributes,
            var_name='Attribute',
            value_name='Value'
        ),
        x='Attribute',
        y='Value',
        hue='legend_group',
        palette={'Top 5%': 'orange', 'Others': 'lightblue'},
        ax=axs[i]
    )
    axs[i].set_title(pos)
    axs[i].set_xlabel('')
    axs[i].set_ylabel('')
    axs[i].set_ylim(0, 100)
    axs[i].legend(loc='best', fontsize=9).set_title('')

# Clean up layout
plt.tight_layout()
plt.subplots_adjust(top=0.87)
plt.show()

"""- **Overall:**
 - Across all metrics and roles, the **Top 5% are clearly superior** to the rest.
 - Not only do they have higher median values, but the **Top 5% are also more consistent** (shorter boxes, fewer outliers), showing that they are well-rounded and consistent players.
- **Defenders (DF):**
 - **Defending** is the most prominent strength, with the Top 5% having a median >80 compared to the rest of the group around ~65.
 - **Dribbling, Passing and Physic** also stand out, showing that today's top defenders are not only defensive but also participate in building play and competing strongly.
 - There is also a difference in **Pace** - speed is the factor that distinguishes normal defenders from top defenders.
>✅ *A Great Defender is not only good at defending but also has good speed, stamina and ball handling technique.*
- **Midfielders (MF):**
 - **Passing and Dribbling** are the two most distinguishing factors – Top 5% have excellent passing and dribbling abilities (~80 and above).
 - **Shooting, Defending and Physic** are also slightly better, showing that they are not only playmakers but can also defend or score directly when needed.
 - The difference in **pace** is less, a good midfielder does not need to be too fast.
> ✅ *A Great Midfielder is a versatile player, capable of controlling the game with technique and physicality, while contributing to both attack and defense.*

- **Forwards (FW):**
 - **Shooting** is the most distinguishing factor – Top 5% have median >80, while the other group ~65.
 - **Dribbling and Passing** are also clearly superior, showing that ball handling and passing skills are core factors.
 - **Pace and Physic** are also better – a great forward is not only a goal scorer but also has good physicality and speed.
> ✅ *A Great Forward is a player with excellent scoring ability, good dribbling and coordination, and has the speed to break through to create breakthroughs.*

---

**Conclusion**
> *In every position, the Top 5% players not only excel in a specific stat, but also have a **comprehensive and consistent performance**. The biggest difference between them and the rest lies in the core skills of each position – for example: Reflexes & Reactions for Goalkeepers, Passing & Dribbling for Midfielders or Shooting & Dribbing for Forwards. It is this **consistent excellence** that is the foundation for creating a great player in football.*

### **What core attributes make great players?**
> ***Based on EA FIFA player attributes, what are the core features that distinguish top 5% players from the rest?***
"""

# Remove main attributes
detail_attributes = [attr for attr in all_attributes if attr not in main_attributes]

# Create a Top 5% classification label column (great_target)
ff23_df['great_target'] = ff23_df.groupby('position_group')['overall'] \
    .transform(lambda x: (x >= x.quantile(0.95)).astype(int))

# Prepare data for training
X = ff23_df[detail_attributes]
y = ff23_df['great_target']
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Train Logistic Regression
lg_model = LogisticRegression(max_iter=1000)
lg_model.fit(X_scaled, y)

# Predict on the same data
y_pred = lg_model.predict(X_scaled)
y_proba = lg_model.predict_proba(X_scaled)[:, 1] # Get class 1 probability

# Confusion Matrix
cm = confusion_matrix(y, y_pred)
print("Confusion Matrix:")
print(cm)

# Classification Report (Precision, Recall, F1-score)
print("\nClassification Report:")
print(classification_report(y, y_pred))

# Classification report table
report_dict = classification_report(y, y_pred, output_dict=True)
class_rp = pd.DataFrame(report_dict).transpose()
columns_to_keep = ['precision', 'recall', 'f1-score', 'support']
class_rp = class_rp[columns_to_keep].round(2)
accuracy_value = class_rp.loc['accuracy', 'precision']
class_rp.loc['accuracy'] = [accuracy_value, np.nan, np.nan, np.nan]
class_rp

# ROC Curve
RocCurveDisplay.from_estimator(lg_model, X_scaled, y)
plt.title("ROC Curve – Logistic Regression")
plt.show()

"""Based on classification report and ROC Curve:
- Overall performance is very good: **Accuracy 97%**, **ROC AUC 0.99** → the model distinguishes very well between top 5% players and the rest.
- The model achieves: **Precision = 0.82** and **Recall = 0.71** for class 1 (top 5% excellent players), meaning the model correctly detects many "great" players, **limiting false positives relatively well.**
- Note the imbalance of the data set: Class 1 only accounts for **about 6%** of the data set, this explains why Recall class 1 = 0.71, lower than class 0. However, **high precision** for class 1 is a positive point.

> ✅ Logistic Regression Model Easy to understand, simple, shows very good efficiency in classifying "great players". Used to **determine the core attributes that make a great player** (via coefficients).
"""

# Analyze feature importance
importance_df = pd.DataFrame({'attribute': detail_attributes, 'coefficient': lg_model.coef_[0]})
importance_df['abs_coef'] = importance_df['coefficient'].abs()
importance_df = importance_df.sort_values(by='abs_coef', ascending=False)

# Display Top 15 most important features
top_features = importance_df.head(15)
top_features

# Draw Top 15 most important features
plt.figure(figsize=(10, 6))
sns.barplot(
    data=top_features,
    y='attribute',
    x='coefficient',
    palette='coolwarm'
)
plt.axvline(0, color='black', linestyle='--')
plt.title('Logistic Regression Coefficients – Top 15 Attributes')
plt.xlabel('Coefficient (Impact on Top 5% likelihood)')
plt.ylabel('Attributes')
plt.tight_layout()
plt.show()

""""What core attributes make great players?"
The most important attributes (by coefficient):
- **Reactions (↑)** - Highest coefficient:
 - **The ability to react to second-ball situations in the match** is the most important factor that helps distinguish the top 5% players.
 - "Great" players often react quickly to situations, making the difference in important moments.
- **Positioning (↓)** - Highest negative coefficient. Although it seems paradoxical, the negative coefficient here **does not mean that this index is bad**, but it can be due to:
 - This index is often high in forwards, not common in midfielders or defenders
 - Or because this variable is negatively correlated with being in the top 5% because the model differentiates by position.
- **Ball control (↑)** and **short passing (↑)**
→ Technical ball handling, control and short passing skills are important for top players.
- **Reflexes (↑)** and other GK stats → Suggests that the top 5% also **include excellent goalkeepers**, who are considered half of the team.
- **Sprint speed (↑)** and **heading accuracy (↑)** → Sprint speed and heading ability – typical skills of high-class forwards.

> 📌 The best players usually possess:
- **Quick reactions**
- **Good ball control and short passing**
- **High speed**
- **Role-specific skills – such as reflexes (GK), short passing (MF) or heading accuracy (FW)**

---

**Conclusion**
> ***Apart from the goalkeeper position, which is a very special position in football, we can see that the most core attributes of a great player are all in the stats that serve the ability to attack and find goals. This means that a midfielder or forward who plays well will always have an advantage over a defender in the race for individual titles, which is absolutely true in modern football.***

# 🎯 **Recommendations**

👨‍🏫 **For Coaches**
- **Develop Reactions & Ball Control early:** These are the most decisive attributes across all positions – crucial for quick decision-making and in-game adaptation.
- **Train holistic skill sets:** Top players are consistent and well-rounded. Focus on building not just role-specific abilities (e.g. finishing for forwards) but also complementary ones (e.g. short passing, sprint speed, vision).
- **Position-tailored development:** Prioritize reflexes and reactions for goalkeepers, short passing and dribbling for midfielders, and heading accuracy with sprint speed for forwards.

🕵️‍♂️ **For Scouts**
- **Target well-rounded performers:** Top 5% players are not just excellent in one metric, but show **consistency across multiple relevant attributes.**
- **Reactions as a scouting filter:** High reaction scores can indicate a player’s ability to adapt, anticipate and influence critical moments.
- **Use positional benchmarks:** Great players exhibit different attribute patterns per position – compare candidates within their roles, not across all.

📊 **For Analysts**
- **Refine model features by role:** Some attributes (like Positioning) may behave differently depending on position – models must account for such positional bias.
- **Monitor performance consistency:** Shorter interquartile ranges in top players show lower variability. Use this to identify high-reliability profiles.
- **Evaluate underrated players by multi-attribute comparison:** Look beyond high individual stats – focus on **combinations** that align with top-tier profiles.

---

**Key Insight:**
> *What makes a great player is not just exceptional ability in one area, but the consistent excellence across the core demands of their position. Modern football increasingly rewards versatility, decision-making speed, and technique — all measurable through the right set of performance attributes.*

## **💼 Part 3 - Market Pulse: Estimating Real-Life Player Value**

### **What factors greatly affect a player's value?**
"""

country_continent_df.info()

country_continent_df.rename(columns={'Continent': 'continent', 'Country': 'country'}, inplace=True)

country_continent_df = country_continent_df.drop_duplicates(keep='first', ignore_index=True)

country_continent_df['continent'].unique()

country_continent_df['country'].unique()

ff23_df['nationality_name'].unique()

manual_country_map = {
    "aruba": "netherlands", "bermuda": "united kingdom", "brunei darussalam": "brunei", "burkina faso": "burkina", "cape verde islands": "cape verde",
    "china pr": "china", "chinese taipei": "taiwan", "congo dr": "democratic republic of congo", "curacao": "netherlands",
    "czech republic": "czechia", "côte d'ivoire": "ivory coast", "england": "united kingdom", "faroe islands": "denmark",
    "gibraltar": "united kingdom", "guam": "united states", "guinea bissau": "guinea-bissau", "korea dpr": "north korea", "korea republic": "south korea",
    "kosovo": "serbia", "macau": "china", "montserrat": "united kingdom", "new caledonia": "france", "north macedonia": "macedonia",
    "northern ireland": "united kingdom", "palestine": "palestine", "puerto rico": "united states", "republic of ireland": "ireland",
    "scotland": "united kingdom", "são tomé e príncipe": "sao tome and principe", "timor-leste": "east timor", "wales": "united kingdom"
}

# Normalize country name
ff23_df['nationality_clean'] = ff23_df['nationality_name'].str.strip().str.lower()
country_continent_df['country_clean'] = country_continent_df['country'].str.strip().str.lower()

# Apply manual mapping
ff23_df['nationality_clean'] = ff23_df['nationality_clean'].replace(manual_country_map)

# Merge continent data into ff23_df
ff23_df = ff23_df.merge(country_continent_df[['country_clean', 'continent']], left_on='nationality_clean', right_on='country_clean', how='left')

# Delete unnecessary columns
ff23_df.drop(columns=['country_clean', 'nationality_clean'], inplace=True)

# Check missing values
missing = ff23_df[ff23_df['continent'].isna()]['nationality_name'].unique()
print("Countries unmatched:", missing)

ff23_df.loc[ff23_df['nationality_name'] == 'Palestine', 'continent'] = 'Asia'

# One-hot encode continent column
continent_dummies = pd.get_dummies(ff23_df['continent'], prefix='continent')

# Rename columns to lowercase and remove prefix
continent_dummies.rename(columns={
    'continent_Africa': 'africa',
    'continent_Asia': 'asia',
    'continent_Europe': 'europe',
    'continent_North America': 'north_america',
    'continent_Oceania': 'oceania',
    'continent_South America': 'south_america'
}, inplace=True)

# Merge into original DataFrame
ff23_df = pd.concat([ff23_df, continent_dummies], axis=1)

ff23_df.info(verbose=True)

ff23_df['work_rate'].unique()

# 1. Split work_rate into 2 columns
ff23_df[['attacking_work_rate', 'defending_work_rate']] = ff23_df['work_rate'].str.split('/', expand=True)

# 2. Assign values ​​in order
work_rate_map = {'Low': 0, 'Medium': 1, 'High': 2}

ff23_df['attacking_work_rate'] = ff23_df['attacking_work_rate'].map(work_rate_map)
ff23_df['defending_work_rate'] = ff23_df['defending_work_rate'].map(work_rate_map)

ff23_df['player_tags'].unique()

# Covert to string
ff23_df['player_tags'] = ff23_df['player_tags'].fillna('').astype(str)
ff23_df['tag_list'] = ff23_df['player_tags'].apply(parse_tag_list)

# One-hot encoding
mlb = MultiLabelBinarizer()
tag_dummies = pd.DataFrame(mlb.fit_transform(ff23_df['tag_list']),
                           columns=[tag.lower().replace(' ', '_') for tag in mlb.classes_],
                           index=ff23_df.index)

# Merge and remove temporary column
ff23_df = pd.concat([ff23_df.drop(columns=['tag_list']), tag_dummies], axis=1)

ff23_df['player_traits'].unique()

# Covert to string
ff23_df['player_traits'] = ff23_df['player_traits'].fillna('').astype(str)

# Split into list of traits (remove extra whitespace)
ff23_df['trait_list'] = ff23_df['player_traits'].apply(lambda x: [trait.strip() for trait in x.split(',') if trait.strip()])

# One-hot encoding
mlb_traits = MultiLabelBinarizer()
trait_dummies = pd.DataFrame(mlb_traits.fit_transform(ff23_df['trait_list']),
                             columns=[trait.lower().replace(' ', '_').replace('(', '').replace(')', '') for trait in mlb_traits.classes_],
                             index=ff23_df.index)

# Merge and remove temporary column
ff23_df = pd.concat([ff23_df.drop(columns=['trait_list']), trait_dummies], axis=1)

# One-hot encode preferred_foot column
foot_dummies = pd.get_dummies(ff23_df['preferred_foot'], prefix='', prefix_sep='')

# Rename columns
foot_dummies.rename(columns={
    'Left': 'left_preferred_foot',
    'Right': 'right_preferred_foot'
}, inplace=True)

# Merge into original DataFrame
ff23_df = pd.concat([ff23_df, foot_dummies], axis=1)

# One-hot encode position_group column
pos_group_dummies = pd.get_dummies(ff23_df['position_group'], prefix='', prefix_sep='')

# Merge into original DataFrame
ff23_df = pd.concat([ff23_df, pos_group_dummies], axis=1)

# Remove N/A value in market_value_in_eur (6%)
ff23_df = ff23_df[ff23_df['market_value_in_eur'].notna()]

ff23_df.info(verbose=True)

# Target variable
y = ff23_df['market_value_in_eur']

# Factors
cols_to_exclude = [
    'player_id', 'fifa_version', 'short_name', 'long_name', 'player_positions', 'date_of_birth', 'club_name',
    'nationality_name', 'preferred_foot', 'work_rate', 'body_type', 'player_tags', 'player_traits', 'name',
    'join_key', 'position', 'position_group', 'value_eur', 'overall', 'pace', 'shooting', 'passing', 'dribbling',
    'defending', 'physic', 'legend_group', 'position_group_ordered', 'continent', 'great_target', 'market_year', 'market_value_in_eur'
]

X = ff23_df.drop(columns=cols_to_exclude)

# Train/Test Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train Linear Regression
lr_model = LinearRegression()
lr_model.fit(X_train, y_train)
y_pred_lr = lr_model.predict(X_test)

mae_lr = mean_absolute_error(y_test, y_pred_lr)
rmse_lr = np.sqrt(mean_squared_error(y_test, y_pred_lr))
r2_lr = r2_score(y_test, y_pred_lr)

# Train Random Forest
rf_model = RandomForestRegressor(n_estimators=100, max_depth=None, random_state=42, n_jobs=-1)
rf_model.fit(X_train, y_train)
y_pred_rf = rf_model.predict(X_test)

mae_rf = mean_absolute_error(y_test, y_pred_rf)
rmse_rf = np.sqrt(mean_squared_error(y_test, y_pred_rf))
r2_rf = r2_score(y_test, y_pred_rf)

# Print Comparison
print("=== Linear Regression ===")
print(f"MAE : {mae_lr:,.0f}")
print(f"RMSE: {rmse_lr:,.0f}")
print(f"R²  : {r2_lr:.4f}")

print("\n=== Random Forest ===")
print(f"MAE : {mae_rf:,.0f}")
print(f"RMSE: {rmse_rf:,.0f}")
print(f"R²  : {r2_rf:.4f}")

LR_RF_Comparison = pd.DataFrame({
    'Model': ['Linear Regression', 'Random Forest'],
    'MAE': [3210957, 1644806],
    'RMSE': [5880733, 3952449],
    'R²': [0.5402, 0.7923]
})
LR_RF_Comparison

"""**✅ Random Forest excels**
- With R² = 0.79, the Random Forest model **explains nearly 80% of the variation in player prices** → very good for real-world data with a lot of noise.
- MAE ~ 1.64 million € is a fairly **low average error** compared to the market size (most mid-range players are in the 1–10 million € range).

**⚠️ Simple Linear Regression and underfitting**
- Only reaching R² = 0.54 → the linear model **ignores many nonlinear relationships**, not suitable for complex data characteristics such as football (many interacting factors, nonlinear).
- High RMSE → poor sensitivity to outliers.

👉 **Conclusion:** Random Forest outperforms Linear Regression across all three metrics and is especially suitable for predicting player values in a complex, non-linear dataset like FIFA.
"""

# Plot Error Distributions
plt.figure(figsize=(14, 5))
plt.subplot(1, 2, 1)
sns.histplot(y_test - y_pred_lr, kde=True, bins=50, color='blue')
plt.title("Error Distribution - Linear Regression")
plt.xlabel("Prediction Error (EUR)")
plt.axvline(0, color='black', linestyle='--')

plt.subplot(1, 2, 2)
sns.histplot(y_test - y_pred_rf, kde=True, bins=50, color='green')
plt.title("Error Distribution - Random Forest")
plt.xlabel("Prediction Error (EUR)")
plt.axvline(0, color='black', linestyle='--')
plt.tight_layout()
plt.show()

"""⚽ **Linear Regression:**
- The error distribution is **wider** and shows a **clear right skew**, indicating many cases where the model **underpredicts player values**, especially for high-value players.
- Presence of **large positive outliers**, where predicted values are much lower than the actual ones.
- The distribution is not symmetrical → **the model struggles with complex or non-linear data.**

🌲 **Random Forest:**
- The error distribution is **tightly concentrated around 0** and almost **symmetrical**, showing that most predictions are close to actual values.
- **Sharp and tall peak**, indicating **high accuracy and consistency.**
- Very few large outliers → the model **handles non-linearity and extreme values well.**

✅ **Conclusion:**
- **Random Forest significantly outperforms** Linear Regression in terms of both accuracy and stability.
- With a focused, balanced error distribution and fewer outliers, **Random Forest is a more reliable choice** for predicting real-world player values.
- In contrast, **Linear Regression is highly sensitive to outliers** and unsuitable for modeling complex player valuation data.
"""

# Factor Importance from Random Forest
feat_imp = pd.Series(rf_model.feature_importances_, index=X.columns)\
             .sort_values(ascending=False)[:20]

plt.figure(figsize=(10, 6))
sns.barplot(x=feat_imp.values, y=feat_imp.index, palette="viridis")
plt.title("Top 20 Important Factors (Random Forest)")
plt.xlabel("Factor Importance Score")
plt.ylabel("Factors")
plt.tight_layout()
plt.show()

"""**Factor Importance Analysis (Top 20 Factors):**
The graph shows the influence of features on **real-life player value**, as assessed by the **Random Forest model**.
- **Potential** is the **dominant factor** with an importance coefficient of **over 0.6**, indicating that the **market values future development potential more than current skills** → This explains why **promising young talents** often have **very high transfer prices**.
- **Wage** ranks **second** → Reflects a player’s **current role in the squad**, **recognition from the club**, and is **strongly correlated** with market value.
- **Age** is the **third most important** feature → Shows that **younger players** are **valued higher** due to their **longer playing career** and **investment potential**.
- **Mental & physical attributes** like composure, stamina, reactions, sprint_speed, acceleration, positioning and finishing appear prominently in the top 20 → These are **critical for midfielders and forwards**, who are **often more valuable** than defenders or goalkeepers.

✅ **Summary Insight:**
> **Long-term and strategic factors** — such as **potential**, **salary**, **age**, **fitness**, and **composure** — have **much greater influence** than pure technical skills in determining player value.

⚽ This reflects the modern transfer market's mindset: **Don’t just buy current ability — invest in future growth**, as **technical attributes can develop through match experience**.

### **Can we use in-game attributes to approximate real-world player value?**
"""

X.columns

# Draw scatter plot to evaluate RF model
plt.figure(figsize=(8, 6))
plt.scatter(y_test, y_pred_rf, alpha=0.6)
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--')
plt.xlabel('Actual Values')
plt.ylabel('Predicted Values')
plt.title('Actual vs Predicted Values (Random Forest)')
plt.grid(True, linestyle='--', alpha=0.5)
plt.tight_layout()
plt.show()

"""- Most points are closely aligned along the **diagonal line**, suggesting that the model captures the underlying **relationships between features and market value** quite well.
- Compared to traditional models like **Linear Regression**, which often fail to model **nonlinear patterns** and produce systematic errors, **Random Forest** shows **stronger performance and generalization ability.**
- However, we observe a **consistent underestimation** for players with **extremely high values** (e.g., above €100M).
→ This may stem from **data imbalance** or the presence of **intangible factors** (e.g., media hype, brand value) that aren't fully captured by the model.
"""

# ========== Predicted vs Real Market Value Comparison ==========

# Copy X_test and add predicted values
X_test_copy = X_test.copy()
X_test_copy['predicted_value'] = y_pred_rf
X_test_copy['player_id'] = X_test_copy.index

# Merge with player info & market value from full df
cols_to_merge = ['player_id', 'short_name', 'date_of_birth', 'club_name', 'overall',
                 'pace', 'shooting', 'dribbling', 'passing', 'defending', 'physic',
                 'position', 'position_group', 'nationality_name', 'value_eur', 'market_value_in_eur']

X_test_full = X_test_copy.merge(ff23_df[cols_to_merge], on='player_id', how='left')

# Remove players with no market value
X_test_full = X_test_full[X_test_full['market_value_in_eur'].notna()]

# Calculate value gap (model - market)
X_test_full['value_gap'] = X_test_full['predicted_value'] - X_test_full['market_value_in_eur']

# Top 10 overestimated (Model >> Market)
over_df = X_test_full[X_test_full['value_gap'] > 0]
over_top = over_df.loc[over_df.groupby('short_name')['value_gap'].idxmax()]
top_over = over_top.sort_values(by='value_gap', ascending=False).head(10)

# Top 10 underestimated (Model << Market)
under_df = X_test_full[X_test_full['value_gap'] < 0]
under_top = under_df.loc[under_df.groupby('short_name')['value_gap'].idxmin()]
top_under = under_top.sort_values(by='value_gap').head(10)

# 📊 Display
print("🔍 Top 10: Market Value Overestimated by the Model")
display(top_over[['short_name', 'date_of_birth', 'nationality_name', 'club_name', 'position', 'pace',
                  'overall', 'shooting', 'passing', 'dribbling', 'defending', 'physic',
                  'predicted_value', 'market_value_in_eur', 'value_gap']])

print("🔍 Top 10: Market Value Underestimated by the Model")
display(top_under[['short_name', 'date_of_birth', 'nationality_name', 'club_name', 'position', 'pace',
                  'overall', 'shooting', 'passing', 'dribbling', 'defending', 'physic',
                  'predicted_value', 'market_value_in_eur', 'value_gap']])

# Chart 1 – Overestimated
plot_over = top_over.copy().sort_values(by='value_gap', ascending=True)
plot_over['value_gap_mil'] = plot_over['value_gap'] / 1e6
plot_over['label'] = plot_over['short_name'] + ' (' + plot_over['position_group'] + ')'

plt.figure(figsize=(10, 6))
sns.barplot(data=plot_over, x='value_gap_mil', y='label', color='orange')
plt.axvline(0, color='black', linestyle='--')
plt.title("Top 10: Market Value Overestimated by the Model")
plt.xlabel("Model - Market Value (Million EUR)")
plt.ylabel("")
plt.tight_layout()
plt.show()

"""🔶 **Overestimated Players (Model > Market)**

The chart highlights players whose **model-predicted values are significantly higher than their actual market prices.** This may occur due to:
- Strong in-game attributes but players are past their prime.
- The model not fully capturing off-pitch factors such as age, recent form, injury history, or transfer context.
- Real-world valuations being influenced by media hype, club strategy, or market trends.
> This suggests that while the model recognizes technical and physical potential, **the real market applies additional filters** beyond data-driven attributes.
"""

# Chart 2 – Underestimated
plot_under = top_under.copy().sort_values(by='value_gap', ascending=True)
plot_under['value_gap_mil'] = plot_under['value_gap'] / 1e6
plot_under['label'] = plot_under['short_name'] + ' (' + plot_under['position_group'] + ')'

plt.figure(figsize=(10, 6))
sns.barplot(data=plot_under, x='value_gap_mil', y='label', color='green')
plt.axvline(0, color='black', linestyle='--')
plt.title("Top 10: Market Value Underestimated by the Model")
plt.xlabel("Model - Market Value (Million EUR)")
plt.ylabel("")
plt.tight_layout()
plt.show()

"""🟩 **Underestimated Players (Model < Market)**

Notably, Cristiano Ronaldo appears here — the model significantly undervalues him compared to the market. Possible reasons include:
- The model lacks variables reflecting global popularity, brand value, and commercial impact.
- Market value reflects not only technical ability but also **off-the-field influence**, fan engagement, and legacy.
> This reinforces that **predictive models need to integrate both quantitative and qualitative dimensions** to align better with real-life dynamics.

---

✅ **Conclusion**

The Random Forest model provides an **objective, attribute-based estimation** of a player's value on the market.

However, the discrepancies between predicted and real-life values reveal:
- The model excels at assessing technical and physical ability.
- It struggles with intangible elements like reputation, media perception, or commercial value.

This misalignment is not a flaw — it’s an opportunity for deeper analysis.

# **Recommendations**
Based on the findings from the Random Forest model and the comparison between predicted and actual market values, we propose several recommendations for key stakeholders involved in player scouting, valuation, and decision-making.

**1. For Clubs and Scouting Departments:**
- Clubs should broaden their evaluation framework by prioritizing **long-term and strategic indicators** such as **player potential, physical fitness**, and **mental attributes**, rather than relying solely on current technical ability.
- Talented young players with high potential are often **undervalued in the market**, representing **high-return investment opportunities** if identified and signed early.
- The model can serve as a **data-driven scouting assistant**, helping clubs to uncover **underrated players** whose in-game attributes suggest higher future value.

**2. For Football Data Analysts:**
- Future models should consider integrating **off-pitch factors** such as **media impact, commercial value, injury history**, and **recent form**, which significantly influence real-world transfer fees.
- Discrepancies between predicted and actual values should be viewed as **anomaly indicators**, highlighting cases where players might be mispriced and warrant further qualitative analysis.
- These insights can contribute to building **interactive dashboards** that blend quantitative model outputs with expert scouting reports for more balanced and strategic decision-making.

**3. For Club Executives and Investors:**
- Transfer decisions should not be overly influenced by **brand value or name recognition**, especially when these elements are not reflected in technical or physical performance.
- Model predictions can provide a **reference point during transfer negotiations**, helping clubs avoid overpaying based on market hype or pressure.
- Investing in **young, high-potential players** not only aligns with model recommendations but also supports long-term club growth and financial sustainability.

**Final Through**
>The model is not designed to replace human judgment in scouting but rather to act as a **decision support tool.** When combined with expert insights and qualitative assessments, such models can significantly enhance a club’s ability to operate efficiently in a **highly competitive and dynamic transfer market.**
"""